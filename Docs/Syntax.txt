Commands:

1. Create

create table [Table_name] (col1: data type1, col2: data type2);
Ex. create table student (name str, age int, grade float);

2. Insert

insert into [Table_name] (value1, value2); {values must me in order of table}
Ex. insert into student (rudra, 10);

3. Update
update {col1: value1, col2: value2, ..} in [Table_name] where {conditions}; {conditions are boolean statements col1 == temp1 and col2 >= 10 etc.}
Ex. update {name: xyz} in student where {name == "abc" and id >= 10};
 
4. Delete

delete from [Table_name] where {conditions}; {conditions are boolean statements col1 == temp1 and col2 >= 10 etc.}
Ex. delete from student where {name == "abc" and id >= 10};

5. Drop

drop table [Table_name];
Ex. drop table student;

6. Projections

General syntax: get [q1] in the table [q2] where [q3] groupby col having [q3] sortby [q4];

where, groupby having and sortby are optional.
having is not allowed without groupby.

q1 is columns i.e. {col1, col2, col3, ...} or {} for all the columns in the table.

q2 can single table i.e table 
q2 can be joins i.e. table1 joining table2 on table1.col1 = table2.col1
if joins are used then table.col must be used instead of col for q1, q3 and q4.

q3 is a condition are boolean expressions.
q4 is columns and orders i.e. {col1, col2, col3, ...} {asc, desc, asc, ...}

Examples:

get {} in the table student;
get {age, gpa} in the table student where {age >= 10 and gpa <= 3.5};

get {age, avg(gpa)} in the table student groupby age;
get {age, avg(gpa)} in the table student groupby age having {avg(gpa) >= 3.2};

get {student.name, athlete.sport} in the table student joining athlete on student.id = athlete.id;

get {} in the table student sortby {age, gpa} {desc, asc};

get {athlete.sport, avg(student.gpa)} in the table student joining athlete on student.id = athlete.id where {student.age >= 10} groupby athlete.sport having {avg(student.gpa) >= 3.2} sortby {athlete.sport, avg(student.gpa)} {asc, desc};